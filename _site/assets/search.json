

[
  
  
    
    
      {
        "title": "Interactive Visualization of Optimization Algorithms in Deep Learning",
        "excerpt": "Optimization on non convex functions in high dimensional spaces, like those encountered in deep learning, can be hard to visualize. However, we can learn a lot from visualizing optimization paths on simple 2d non convex functions.\n\nClick anywhere on the function contour to start a minimization.\n\n\n\n\nYou can toggle the different algorithms by clicking the circles in the lower bar. The code is available here.\n\n\n\nObservations\n\nThe above function is given by\n\n[f(x, y) =  x^2 + y^2 - a e^{-\\frac{(x - 1)^2 + y^2}{c}} - b e^{-\\frac{(x + 1)^2 + y^2}{d}}]\n\nIt is basically a quadratic “bowl” with two gaussians creating minima at (1, 0) and (-1, 0) respectively. The size of these minima is controlled by the \\(a\\) and \\(b\\) parameters.\n\nDifferent minima\n\nStarting from the same point, different algorithms will converge to different minima. Often, SGD and SGD with momentum will converge to the poorer minimum (the one on the right) while RMSProp and Adam will converge to the global minimum. For this particular function, Adam is the algorithm that converges to the global minimum from the most initializations.\n\n\nOnly Adam (in green) converges to the global minimum.\n\nThe effects of momentum\n\nAugmenting SGD with momentum has many advantages and often works better than the other standard algorithms for an appropriately chosen learning rate (check out this paper for more details). However, with the wrong learning rate, SGD with momentum can overshoot minima and this often leads to a spiraling pattern around the minimum.\n\n\nSGD with momentum spiraling towards the minimum.\n\nStandard SGD does not get you far\n\nSGD without momentum consistently performs the worst. The learning rate for SGD on the visualization is set to be artificially high (an order of magnitude higher than the other algorithms) in order for the optimization to converge in a reasonable amount of time.\n\n\n\nClassic optimization test functions\n\nThere are many famous test functions for optimization which are useful for testing convergence, precision, robustness and performance of optimization algorithms. They also exhibit interesting behaviour which does not appear in the above function.\n\nRastrigin\n\n\n  The visualization for this function can be found here\n\n\nA Rastrigin function is a quadratic bowl overlayed with a grid of sine bumps creating a large number of local minima.\n\n\nSGD with momentum reaches the global optimum while all other algorithms get stuck in the same local minimum.\n\nIn this example, SGD with momentum outperforms all other algorithms using the default parameter settings. The speed built up from the momentum allows it to power through the sine bumps and converge to the global minimum when other algorithms don’t. Of course, this would not necessarily be the case if the sine bumps had been scaled or spaced differently. Indeed, on the first function in this post, Adam performed the best while SGD with momentum performs the best on the Rastrigin function. This shows that there is no single algorithm that will perform the best on all functions, even in simple 2D cases.\n\nRosenbrock\n\n\n  The visualization for this function can be found here\n\n\nThe Rosenbrock function has a single global minimum inside a parabolic shaped valley. Most algorithms rapidly converge to this valley, but it is typically difficult to converge to the global minimum within this valley.\n\n\nAll algorithms find the global minimum but through very different paths\n\nWhile all algorithms converge to the optimum, the adaptive and non adaptive optimization algorithms approach the minimum through different paths. In higher dimensional problems, like in deep learning, different optimization algorithms will likely explore very different areas of parameter space.\n\n\n\nConclusion\n\nOptimization algorithms can exhibit interesting behaviour, even on simple 2d functions. Of course, there are also many phenomena which we cannot hope to visualize on simple 2d problems. Understanding and visualizing optimization in deep learning in general is an active area of research. New optimization algorithms, like Eve or YellowFin, are also being developed. It would be interesting to modify the above code to visualize these more recent algorithms, although it is unclear whether they would differ significantly from momentum SGD on these toy problems.\n\n\n\n\n\n\n\n\n\n\n\n",
        "content": "Optimization on non convex functions in high dimensional spaces, like those encountered in deep learning, can be hard to visualize. However, we can learn a lot from visualizing optimization paths on simple 2d non convex functions.\n\nClick anywhere on the function contour to start a minimization.\n\n\n\n\nYou can toggle the different algorithms by clicking the circles in the lower bar. The code is available here.\n\n\n\nObservations\n\nThe above function is given by\n\n[f(x, y) =  x^2 + y^2 - a e^{-\\frac{(x - 1)^2 + y^2}{c}} - b e^{-\\frac{(x + 1)^2 + y^2}{d}}]\n\nIt is basically a quadratic “bowl” with two gaussians creating minima at (1, 0) and (-1, 0) respectively. The size of these minima is controlled by the \\(a\\) and \\(b\\) parameters.\n\nDifferent minima\n\nStarting from the same point, different algorithms will converge to different minima. Often, SGD and SGD with momentum will converge to the poorer minimum (the one on the right) while RMSProp and Adam will converge to the global minimum. For this particular function, Adam is the algorithm that converges to the global minimum from the most initializations.\n\n\nOnly Adam (in green) converges to the global minimum.\n\nThe effects of momentum\n\nAugmenting SGD with momentum has many advantages and often works better than the other standard algorithms for an appropriately chosen learning rate (check out this paper for more details). However, with the wrong learning rate, SGD with momentum can overshoot minima and this often leads to a spiraling pattern around the minimum.\n\n\nSGD with momentum spiraling towards the minimum.\n\nStandard SGD does not get you far\n\nSGD without momentum consistently performs the worst. The learning rate for SGD on the visualization is set to be artificially high (an order of magnitude higher than the other algorithms) in order for the optimization to converge in a reasonable amount of time.\n\n\n\nClassic optimization test functions\n\nThere are many famous test functions for optimization which are useful for testing convergence, precision, robustness and performance of optimization algorithms. They also exhibit interesting behaviour which does not appear in the above function.\n\nRastrigin\n\n\n  The visualization for this function can be found here\n\n\nA Rastrigin function is a quadratic bowl overlayed with a grid of sine bumps creating a large number of local minima.\n\n\nSGD with momentum reaches the global optimum while all other algorithms get stuck in the same local minimum.\n\nIn this example, SGD with momentum outperforms all other algorithms using the default parameter settings. The speed built up from the momentum allows it to power through the sine bumps and converge to the global minimum when other algorithms don’t. Of course, this would not necessarily be the case if the sine bumps had been scaled or spaced differently. Indeed, on the first function in this post, Adam performed the best while SGD with momentum performs the best on the Rastrigin function. This shows that there is no single algorithm that will perform the best on all functions, even in simple 2D cases.\n\nRosenbrock\n\n\n  The visualization for this function can be found here\n\n\nThe Rosenbrock function has a single global minimum inside a parabolic shaped valley. Most algorithms rapidly converge to this valley, but it is typically difficult to converge to the global minimum within this valley.\n\n\nAll algorithms find the global minimum but through very different paths\n\nWhile all algorithms converge to the optimum, the adaptive and non adaptive optimization algorithms approach the minimum through different paths. In higher dimensional problems, like in deep learning, different optimization algorithms will likely explore very different areas of parameter space.\n\n\n\nConclusion\n\nOptimization algorithms can exhibit interesting behaviour, even on simple 2d functions. Of course, there are also many phenomena which we cannot hope to visualize on simple 2d problems. Understanding and visualizing optimization in deep learning in general is an active area of research. New optimization algorithms, like Eve or YellowFin, are also being developed. It would be interesting to modify the above code to visualize these more recent algorithms, although it is unclear whether they would differ significantly from momentum SGD on these toy problems.\n\n\n\n\n\n\n\n\n\n\n\n",
        "url": "/2018/01/24/optimization-visualization/"
      },
    
      {
        "title": "Passing a Chicken through an MNIST Model",
        "excerpt": "When you put a picture of a chicken through a model trained on MNIST, the model is 99.9% confident that the chicken is a 5. That’s not good.\n\nThis problem does not just relate to chickens and digits but the fact that a neural net makes very confident predictions on data that does not come from the same distribution as the training data. While this example is artificial, it is common in practice for a machine learning model to be used on data that is very different from the data it was trained on. A self-driving car, for example, may encounter an unusual environment that was never seen during training. In such cases, the system should not be overly confident but instead let the driver know that it is not able to make a meaningful prediction.1\n\n\nImages from MNIST and a chicken.\n\nDiscriminative models and unseen data\n\nWhen doing classification we are often interested in building a discriminative model \\(p(y \\vert x)\\), i.e. a model of the probability of a certain label \\(y\\) (e.g. digit type) given a datapoint \\(x\\) (e.g. an image of a digit). If we use data drawn from a distribution \\(p_{\\text{train}}(x)\\) to train a discriminative model \\(p(y \\vert x)\\), how will the trained model behave when we input an \\(x\\) that is very far from \\(p_{\\text{train}}(x)\\)? For example, if we train a model to predict digit type from an image of a digit, what happens when we put a picture of a chicken through this model?\n\n\nIn the space of images, chickens lie far away from digits. This figure shows the distribution of digits in blue (corresponding to the training distribution in our case) and where an image of a chicken would lie relative to this.\n\nChicken probabilities under an MNIST model\n\nTo explore these problems, we train a simple convolutional neural network (CNN) on MNIST which gets about 98% testing accuracy. We would then like to see what happens to the output probabilities \\(p(y \\vert x)\\) of the trained model when shown images that are completely different from digits. As an example, we pass an “MNIST-ified” chicken through the model.2\n\n\nAn MNIST-ified chicken. The CNN takes in 32 by 32 grayscale images, so we transform the image of the chicken to match this.\n\nIdeally, the outputs \\(p(y \\vert x)\\) would be approximately uniform, i.e. the probability of every class would be about 10%. This would mean that the CNN has little confidence that the chicken belongs to any of the 10 classes. However, for the above picture of a chicken, the probability of the label 5 is 99.9%.\n\n\nHistograms of expected vs actual softmax class probabilities for an image of a chicken on an MNIST model.\n\nThe model is extremely confident that this chicken is the digit 5 even though, to a human, it clearly isn’t. Even worse, it is much more confident that this chicken is a 5 than many other digits that are actually a 5.\n\n\nThe model is more confident that the image on the right is a 5 than the image on the left.\n\nFashion probabilities under an MNIST model\n\nOf course, it could be that this image of a chicken is just a fluke and high confidence predictions for data outside of \\(p_{\\text{train}}(x)\\) are rare. To test this, we use the FashionMNIST dataset which contains images of various types clothing.\n\n\nMNIST and FashionMNIST examples. The images are the same size and both contain 10 classes.\n\nThese images have nothing to do with digits, so again we would hope that the model will only make low confidence predictions. We predict \\(p(y \\vert x)\\) for 10000 images from the Fashion MNIST dataset using the trained MNIST model and measure the fraction of them which have a high confidence prediction (i.e. where the maximum probability of a certain class \\(\\max_y p(y \\vert x)\\) is very high). The results are shown below:\n\n\n  63.4% of examples have more than 99% confidence\n  74.3% of examples have more than 95% confidence\n  88.9% of examples have more than 75% confidence\n\n\nAlmost two thirds of the Fashion MNIST dataset is classified as a certain digit type with more than 99% confidence. This shows that neural nets can consistently make confident predictions about unseen data and that using the output probabilities as a measure of confidence does not make much sense, at least on data that is very far from the training data.\n\nWe can also look at how confident3 predictions on the fashion items are compared to those on correctly classified digits. To do this, we draw a vertical pink line for every FashionMNIST image and a blue line for every MNIST image. We then sort the lines by the confidence of the prediction on the corresponding image. Ideally, the resulting plot would be all pink on the left and all blue on the right (i.e all MNIST examples have higher confidence than the FashionMNIST examples under an MNIST model). The actual results are shown below.\n\n\nImages sorted by confidence. The x-axis corresponds to increasing confidence and each vertical line to an image.\n\nIdeally, all FashionMNIST images would have lower confidence and so be on the left, but this is not the case.\n\nNatural adversarial examples\n\nThe chicken and fashion images can loosely be thought of as “natural” adversarial examples. Adversarial examples are typically images from a certain class (e.g. 5) that have been imperceptibly modified to be misclassified as another class (e.g. 7) with high confidence. In the same way that adversarial examples fool the machine learning model, the chicken and fashion images “fool” the model into classifying these images into a certain class with high confidence even though they do not belong to that class (or any of the classes in our case). Machine Learning systems should not only be protected from attackers that maliciously modify images but also from naturally occurring images that are far from the training distribution.\n\nModeling the data p(x)\n\nIt seems clear that we can’t solely rely on modeling \\(p(y \\vert x)\\) when data far from \\(p_{\\text{train}}(x)\\) may be used at test time. In the real world, it is often very difficult to constrain the user only to use data drawn from \\(p_{\\text{train}}(x)\\).\n\nOne way to solve this problem is to not only model \\(p(y \\vert x)\\) but to also model \\(p_{\\text{train}}(x)\\). If we can model \\(p_{\\text{train}}(x)\\) and we get a new sample \\(x_{\\text{test}}\\), we can first check whether this sample is probable under \\(p_{\\text{train}}(x)\\). If it is, we have seen something similar before so we should go ahead and predict \\(p(y \\vert x)\\), otherwise we can reject this sample.\n\n\nSimple algorithm for returning meaningful predictions.\n\nThere are several ways of modeling p(x). In this post, we will focus on variational autoencoders (VAE) which have been quite successful at modeling distributions of images.\n\nVariational Autoencoders to model p(x)\n\nVAEs are generative models that learn a joint model \\(p(x, z)\\) of the data \\(x\\) and some latent variables \\(z\\). As the name suggests, VAEs are closely related to autoencoders. VAEs work by encoding a datapoint \\(x\\) into a distribution \\(q(z \\vert x)\\) of latent variables and then sampling a latent vector \\(z\\) from this distribution. The sample \\(z\\) is then decoded into a reconstruction of the encoded data \\(x\\). The encoder and decoder are typically neural networks.\n\n\nSketch of VAE architecture, sampling is shown with dashed lines.\n\nInterestingly, VAEs optimize a lower bound on \\(\\log p(x)\\) called the Evidence Lower Bound (ELBO).\n\n[\\log p(x) &gt;= \\text{ELBO} = - \\text{VAE loss}]\n\nSo after training a VAE on data from \\(p_{\\text{train}}\\), we can calculate the loss on a new example \\(x_{\\text{test}}\\) and obtain a lower bound on the log likelihood of that example under \\(p_{\\text{train}}\\). Of course, this is a lower bound, but the hope is that for a well trained model, this lower bound is fairly tight.\n\nReconstruction of a digit and a chicken\n\nTo test this, we train a convolutional VAE on MNIST. Note that the ELBO is the sum of a reconstruction error term and a KL divergence term. So if an image is poorly reconstructed by the VAE, it will typically have low probability. The figure below shows reconstructions from the trained VAE.\n\n\nA digit and a chicken reconstructed by a VAE trained on MNIST. As can be seen the digit is well reconstructed while the chicken is not. This suggests the chicken has low probability under the training distribution.\n\nWe can now use the VAE to predict the probability of 10000 FashionMNIST images and 10000 MNIST images under \\(p_{\\text{train}}\\). Ideally, the probabilities of FashionMNIST examples would be considerably lower than all the MNIST examples and we would get a good separation between the two. The figure below shows the results, with sorted probabilities from lowest to highest.\n\n\nFashionMNIST and MNIST examples sorted by probabilities from a VAE model.\n\nAs can be seen the separation is much cleaner than when using the maximum class probabilities \\(p(y \\vert x)\\). This shows that modeling \\(p(x)\\) can be useful for classification tasks when data different from the training data may be used at test time.\n\nConclusion\n\nIn this post we used the toy example of chickens and digits to show that a deep learning model can make confident, but meaningless, predictions on data it has never seen. Not only does a chicken get confidently classified as a 5 by an MNIST model, other natural images such as fashion items consistently fool the classifier into making high confidence predictions. We showed that modeling \\(p(x)\\) with a VAE is a simple solution that can partially mitigate this problem. However, solving this problem and, more generally, modeling uncertainty in deep learning is an important area of research.\n\nFootnotes\n1. The idea of putting a picture of a chicken through an MNIST model initially came from a question I heard on the Approximate Inference panel at NIPS 2017\n\n2. I resized MNIST from 28 by 28 to 32 by 32 for these experiments\n\n3. The word confidence is used loosely here and is not related to confidence in the statistical sense. However \\(\\max_y p(y \\vert x)\\) is commonly used to show that a model is “confident” about its predictions and this is how we use it here\n",
        "content": "When you put a picture of a chicken through a model trained on MNIST, the model is 99.9% confident that the chicken is a 5. That’s not good.\n\nThis problem does not just relate to chickens and digits but the fact that a neural net makes very confident predictions on data that does not come from the same distribution as the training data. While this example is artificial, it is common in practice for a machine learning model to be used on data that is very different from the data it was trained on. A self-driving car, for example, may encounter an unusual environment that was never seen during training. In such cases, the system should not be overly confident but instead let the driver know that it is not able to make a meaningful prediction.1\n\n\nImages from MNIST and a chicken.\n\nDiscriminative models and unseen data\n\nWhen doing classification we are often interested in building a discriminative model \\(p(y \\vert x)\\), i.e. a model of the probability of a certain label \\(y\\) (e.g. digit type) given a datapoint \\(x\\) (e.g. an image of a digit). If we use data drawn from a distribution \\(p_{\\text{train}}(x)\\) to train a discriminative model \\(p(y \\vert x)\\), how will the trained model behave when we input an \\(x\\) that is very far from \\(p_{\\text{train}}(x)\\)? For example, if we train a model to predict digit type from an image of a digit, what happens when we put a picture of a chicken through this model?\n\n\nIn the space of images, chickens lie far away from digits. This figure shows the distribution of digits in blue (corresponding to the training distribution in our case) and where an image of a chicken would lie relative to this.\n\nChicken probabilities under an MNIST model\n\nTo explore these problems, we train a simple convolutional neural network (CNN) on MNIST which gets about 98% testing accuracy. We would then like to see what happens to the output probabilities \\(p(y \\vert x)\\) of the trained model when shown images that are completely different from digits. As an example, we pass an “MNIST-ified” chicken through the model.2\n\n\nAn MNIST-ified chicken. The CNN takes in 32 by 32 grayscale images, so we transform the image of the chicken to match this.\n\nIdeally, the outputs \\(p(y \\vert x)\\) would be approximately uniform, i.e. the probability of every class would be about 10%. This would mean that the CNN has little confidence that the chicken belongs to any of the 10 classes. However, for the above picture of a chicken, the probability of the label 5 is 99.9%.\n\n\nHistograms of expected vs actual softmax class probabilities for an image of a chicken on an MNIST model.\n\nThe model is extremely confident that this chicken is the digit 5 even though, to a human, it clearly isn’t. Even worse, it is much more confident that this chicken is a 5 than many other digits that are actually a 5.\n\n\nThe model is more confident that the image on the right is a 5 than the image on the left.\n\nFashion probabilities under an MNIST model\n\nOf course, it could be that this image of a chicken is just a fluke and high confidence predictions for data outside of \\(p_{\\text{train}}(x)\\) are rare. To test this, we use the FashionMNIST dataset which contains images of various types clothing.\n\n\nMNIST and FashionMNIST examples. The images are the same size and both contain 10 classes.\n\nThese images have nothing to do with digits, so again we would hope that the model will only make low confidence predictions. We predict \\(p(y \\vert x)\\) for 10000 images from the Fashion MNIST dataset using the trained MNIST model and measure the fraction of them which have a high confidence prediction (i.e. where the maximum probability of a certain class \\(\\max_y p(y \\vert x)\\) is very high). The results are shown below:\n\n\n  63.4% of examples have more than 99% confidence\n  74.3% of examples have more than 95% confidence\n  88.9% of examples have more than 75% confidence\n\n\nAlmost two thirds of the Fashion MNIST dataset is classified as a certain digit type with more than 99% confidence. This shows that neural nets can consistently make confident predictions about unseen data and that using the output probabilities as a measure of confidence does not make much sense, at least on data that is very far from the training data.\n\nWe can also look at how confident3 predictions on the fashion items are compared to those on correctly classified digits. To do this, we draw a vertical pink line for every FashionMNIST image and a blue line for every MNIST image. We then sort the lines by the confidence of the prediction on the corresponding image. Ideally, the resulting plot would be all pink on the left and all blue on the right (i.e all MNIST examples have higher confidence than the FashionMNIST examples under an MNIST model). The actual results are shown below.\n\n\nImages sorted by confidence. The x-axis corresponds to increasing confidence and each vertical line to an image.\n\nIdeally, all FashionMNIST images would have lower confidence and so be on the left, but this is not the case.\n\nNatural adversarial examples\n\nThe chicken and fashion images can loosely be thought of as “natural” adversarial examples. Adversarial examples are typically images from a certain class (e.g. 5) that have been imperceptibly modified to be misclassified as another class (e.g. 7) with high confidence. In the same way that adversarial examples fool the machine learning model, the chicken and fashion images “fool” the model into classifying these images into a certain class with high confidence even though they do not belong to that class (or any of the classes in our case). Machine Learning systems should not only be protected from attackers that maliciously modify images but also from naturally occurring images that are far from the training distribution.\n\nModeling the data p(x)\n\nIt seems clear that we can’t solely rely on modeling \\(p(y \\vert x)\\) when data far from \\(p_{\\text{train}}(x)\\) may be used at test time. In the real world, it is often very difficult to constrain the user only to use data drawn from \\(p_{\\text{train}}(x)\\).\n\nOne way to solve this problem is to not only model \\(p(y \\vert x)\\) but to also model \\(p_{\\text{train}}(x)\\). If we can model \\(p_{\\text{train}}(x)\\) and we get a new sample \\(x_{\\text{test}}\\), we can first check whether this sample is probable under \\(p_{\\text{train}}(x)\\). If it is, we have seen something similar before so we should go ahead and predict \\(p(y \\vert x)\\), otherwise we can reject this sample.\n\n\nSimple algorithm for returning meaningful predictions.\n\nThere are several ways of modeling p(x). In this post, we will focus on variational autoencoders (VAE) which have been quite successful at modeling distributions of images.\n\nVariational Autoencoders to model p(x)\n\nVAEs are generative models that learn a joint model \\(p(x, z)\\) of the data \\(x\\) and some latent variables \\(z\\). As the name suggests, VAEs are closely related to autoencoders. VAEs work by encoding a datapoint \\(x\\) into a distribution \\(q(z \\vert x)\\) of latent variables and then sampling a latent vector \\(z\\) from this distribution. The sample \\(z\\) is then decoded into a reconstruction of the encoded data \\(x\\). The encoder and decoder are typically neural networks.\n\n\nSketch of VAE architecture, sampling is shown with dashed lines.\n\nInterestingly, VAEs optimize a lower bound on \\(\\log p(x)\\) called the Evidence Lower Bound (ELBO).\n\n[\\log p(x) &gt;= \\text{ELBO} = - \\text{VAE loss}]\n\nSo after training a VAE on data from \\(p_{\\text{train}}\\), we can calculate the loss on a new example \\(x_{\\text{test}}\\) and obtain a lower bound on the log likelihood of that example under \\(p_{\\text{train}}\\). Of course, this is a lower bound, but the hope is that for a well trained model, this lower bound is fairly tight.\n\nReconstruction of a digit and a chicken\n\nTo test this, we train a convolutional VAE on MNIST. Note that the ELBO is the sum of a reconstruction error term and a KL divergence term. So if an image is poorly reconstructed by the VAE, it will typically have low probability. The figure below shows reconstructions from the trained VAE.\n\n\nA digit and a chicken reconstructed by a VAE trained on MNIST. As can be seen the digit is well reconstructed while the chicken is not. This suggests the chicken has low probability under the training distribution.\n\nWe can now use the VAE to predict the probability of 10000 FashionMNIST images and 10000 MNIST images under \\(p_{\\text{train}}\\). Ideally, the probabilities of FashionMNIST examples would be considerably lower than all the MNIST examples and we would get a good separation between the two. The figure below shows the results, with sorted probabilities from lowest to highest.\n\n\nFashionMNIST and MNIST examples sorted by probabilities from a VAE model.\n\nAs can be seen the separation is much cleaner than when using the maximum class probabilities \\(p(y \\vert x)\\). This shows that modeling \\(p(x)\\) can be useful for classification tasks when data different from the training data may be used at test time.\n\nConclusion\n\nIn this post we used the toy example of chickens and digits to show that a deep learning model can make confident, but meaningless, predictions on data it has never seen. Not only does a chicken get confidently classified as a 5 by an MNIST model, other natural images such as fashion items consistently fool the classifier into making high confidence predictions. We showed that modeling \\(p(x)\\) with a VAE is a simple solution that can partially mitigate this problem. However, solving this problem and, more generally, modeling uncertainty in deep learning is an important area of research.\n\nFootnotes\n1. The idea of putting a picture of a chicken through an MNIST model initially came from a question I heard on the Approximate Inference panel at NIPS 2017\n\n2. I resized MNIST from 28 by 28 to 32 by 32 for these experiments\n\n3. The word confidence is used loosely here and is not related to confidence in the statistical sense. However \\(\\max_y p(y \\vert x)\\) is commonly used to show that a model is “confident” about its predictions and this is how we use it here\n",
        "url": "/2018/03/14/mnist-chicken/"
      },
    
  
  
  
  {
    "title": "Hello!",
    "excerpt": "\n",
    "content": "\n  \n\n  \n    Chen Jin\n  \n  \n    \n      twitter\n\n    \n    &nbsp;\n    \n      github\n\n    \n    &nbsp;\n    \n      linkedin\n\n    \n    &nbsp;\n    \n      scholar\n\n    \n  \n\n\nHi! I’m a postdoctoral research fellow in the Centre for Medical Image Computing (CMIC) at University College London, working with Dr Thomy Mertzanidou, Prof. Daniel Alexander and Dr Marnix Jansen.\n\nMy recent research interests include efficient deep learning based analysis of large images like ultra-high resolution 2D images, 3D image or video streams in healthcare applications. I’m also interested in the multiple scale and multi modality learning, particularly in medical or geographical image domain.\n\nPreviously, I obtained my PhD in the Institute of GeoEnergy Engineering, Heriot-Watt University. My thesis was about Developing a Hierarchical Digital Rock Analysis Workflow, involving machine learning based multi-scale 2D/3D image analysis, segmentation, registration, fusion, reconstruction and fluid flow simulation.\n\nDuring PhD, I also worked as a research intern at Canadian Natural Resources International (UK) in Aberdeen. I was responsible for building the physical reservoir scale models and investigated fluid flow behaviours through simulation, and with the fortune to present the team and helped decisions worth millions.\n\nContact\n\nMy email is chen.jin (at) ucl.ac.uk\n",
    "url": "/"
  },
  
  {
    "title": "Selected Publications",
    "excerpt": "\n",
    "content": "\n\n  \n    \n  \n\n  \n    Foveation for Segmentation of Ultra-High Resolution Images\n\n    Jin, C.*, Tanno, R.*, Xu, M., Mertzanidou, T. and Alexander, D.C.\n\n    \n      PDF | \n      Preprint Link | \n      Code\n\n    Preprint, a shorter version published in MICCAI, 2020\n  \n\n\n \n\n\n\n  \n    \n  \n\n  \n    Disentangling Human Error from the Ground Truth in Segmentation of Medical Images\n\n    Zhang, L.*, Tanno, R.*, Bronik, K., Jin, C., Nachev, P., Barkhof, F., Ciccarelli, O. and Alexander, D.C.\n\n    \n      PDF | \n      Link | \n      Code\n\n\n    NeurIPS 2020\n  \n\n\n \n\n\n\n  \n    \n  \n\n  \n    Connectivity-enhancing fracture segmentation from X-ray Tomography (XRT) images of reservoir core samples by machine learning-based method\n\n    Jin, C. and Ma, J.\n\n    \n      PDF | \n      Link\n\n\n    InterPore 2018\n  \n\n\n \n\n\n\n  \n    \n  \n\n  \n    Developing a Hierarchical Digital Core Analysis Workflow for Petro-Physical Characterisation of Cross-laminated Reservoir Rocks at Pore Scales\n\n    Jin, C.\n\n    \n      PDF | \n      Link\n\n\n    Ph.D. thesis 2017\n  \n\n\n \n\n\n\n  \n    \n  \n\n  \n    Challenges in Ultra-tight Rock Characterisation for Fluid Flow Modelling in Digital Core Analysis\n\n    Jin, C. and Ma, J.\n\n    \n      Link\n\n\n    InterPore 2017\n  \n\n\n \n\n\n\n  \n    \n  \n\n  \n    Advanced fracture segmentation from X-ray tomography (XRT) images of reservoir core samples by machine learning-based centerline extraction\n\n    Jin, C. and Ma, J.\n\n    \n      Link\n\n\n    EAGE-SCA 2016\n  \n\n\n \n\n\n\n  \n    \n  \n\n  \n    An Automated Machine-Learning Procedure For Robust Classification of SEM Images of Cross-Laminated Sandstones For Digital Rock Analysis\n\n    Jin, C. and Ma, J.\n\n    \n      PDF | \n      Link SCA 2014\n  \n\n\n \n\n",
    "url": "/publications/"
  },
  
  {
    "title": "Resume",
    "excerpt": "\n",
    "content": "For more details, you can download the pdf version of my resume pdf\nhere (updated Nov 2020).\n\nExperience 👨‍💼\n\n\n\n\n  \n    \n  \n\n  \n    \n      University College London\n      Mar 2019 - Present\n    \n    Research Associate\n    \n      Develop deep learning model for histopathology image analysis and multiple scale-modality mapping for Histology-MRI project\n    \n  \n\n\n\n\n\n\n  \n    \n  \n\n  \n    \n      Heriot-Watt University\n      Nov 2017 - Nov 2018\n    \n    Research Associate\n    \n      3D images modelling and reconstruction for mineral at nano-scale\n    \n  \n\n\n\n\n\n\n  \n    \n  \n\n  \n    \n      Canadian Natural Resources International (UK) Limited\n      Aug 2013 - Dec 2014\n    \n    Intern Student\n    \n      Performed and presented numerical simulation analysis to development team helped on decisions worth millions\n    \n  \n\n\n\nSkills 💻\n\n\n  \n    Programming\n    \n      \n        Experienced: Python, Matlab, C++\n      \n      \n        Familiar: Javascript, R, Batch\n      \n    \n  \n\n  \n    Frameworks\n    \n      \n        Deep Learning: Pytorch, Tensorflow, Keras\n      \n      \n        Visualization: ImageJ (FIJI), Avizo, ParaView, Cinema4D\n      \n      \n        Other: Jupyter, Linux, Cloud/Cluster\n      \n    \n  \n\n  \n    Languages: Fluenet in both Chinese and English\n  \n\n\nProjects 🌱\n\n\n  \n    Histology-MRI mapping and Medical image analysis (Python/ Pytorch / R)\n    \n      \n        Delivered: 3 Conference and 1 Journal articles, 2019-2020\n      \n      \n        Innovated a novel “learnable data loader” for optimal mega-pixel histology image segmentation.\n      \n      \n        Developed a deformed segmentation method for efficient analysis of large but imbalanced 2D/3D medical images.\n      \n      \n        Deployed R based label fusion method STAPLE to assist a deep learning-based inter-reader variability project.\n      \n      \n        Assisted 3D reconstruction of tumor cells and image analysis from stacked immunofluorescence images.\n      \n    \n  \n\n  \n    Multiscale image analysis and reconstruction workflow (Python/ C++/ Javascript) \n    \n      \n        Delivered: PhD Thesis, 2017\n      \n      \n        Owned a novel multi-scale/moda image fusion and reconstruction workflow for digital rock analysis.\n      \n      \n        Developed machine learning method for rock image analysis and pattern recognition of landmark (thin layer).\n      \n      \n        Calibrate low-quality CT and high-quality SEM images, and conduct image registration to integrate multiscale data.\n      \n      \n        Segmented particles (6E+5 per image), analysed and visualised cross-scale structure-correlated statistics by sliding window.\n      \n      \n        3D pore-grain image reconstruction via multiple point statistics method (conditional to neighbouring “patch”).\n      \n      \n        Automated the workflow in parallel HPC delivered on broken record size of rock image (1.5E+12 voxels).\n      \n    \n  \n  \n  \n    Weak supervised deep neural model for segmentation (Matlab) \n    \n      \n        Delivered: A Chapter of PhD Thesis, Presented (2016)/ Poster (2018) at conferences\n      \n      \n        Innovated a weak supervised iterative convolutional net (embedded with filter banks, AdaBoost and auto-context) that auto-improves segmented connectivity of thin linear pattern with learning transferred from synthetic scratch.\n      \n      \n        Researched the nature impact of the convolutional feature and training image on segmented connectivity from noisy images, measured qualitatively by activation map and quantitatively by confusion matrix over various filter banks.\n      \n    \n  \n  \n  \n    Uncertainty study of digital rock analysis in the parallel project (C++/ imageJ) \n    \n      \n        Delivered: Presented at conference, 2017\n      \n      \n        Presented to industry the segmentation uncertainty improved by machine learning and visualise fluid simulation.\n      \n      \n        Collaborated with visiting scholar on feature selection framework combine super-pixel and genetic algorithm.\n      \n    \n  \n  \n  \n    Automated machine-learning for rock phase classification (JavaScript) \n    \n      \n        Delivered: Published at conference, 2014\n      \n      \n        Implement an auto-sampling and labeling script in ImageJ by local mean and variance.\n      \n      \n        Developed an automated patch-based rock pattern classification procedure based on random forest.\n      \n    \n  \n\n\n\nEducation 🎓\n\n\n\n\n  \n    \n  \n\n  \n    \n      Heriot-Watt University\n      2013 - 2017\n    \n    PhD Computational Geoscience\n    \n      \n    \n  \n\n\n\n\n\n\n  \n    \n  \n\n  \n    \n      Heriot-Watt University\n      2011 - 2012\n    \n    MSc Petroleum Engineering\n    \n      \n    \n  \n\n\n\n\n\n\n  \n    \n  \n\n  \n    \n      China University of Petroleum\n      2007 - 2011\n    \n    BSc Oil and Gas Engineering\n    \n      \n    \n  \n\n\n\nStudent Supervision 👨‍🏫\n\n\n  \n     PhD co-supervisor\n    UCL, 2019-Present \n    \n    Student Olga Fourkioti, who is working on Multiple-instance learning (MIL) for Classification of Cancerous Histology Image\n    \n  \n\n  \n     MSc Projects co-supervisor\n    \n    Student Kristiana Grigoriadis, who was working on Automatic Segmentation of Prostate Cancer Histopathology using Deep Learning \n    \n    UCL, 2020 \n    \n    Student Sebastian Ramirez Vallone, who was working on TOTAL sponsered project on Automatic Shale Rock Characterisation by Machine Learning based image analysis methods \n    \n    Heriot-Watt University, 2016 \n  \n  \n\n\nAwards 🌟\n\n\n  \n    Scholarship for Outstanding International Student from Xinjiang, China\n    2016 \n    Top 20 in the UK, issued by Chinese Government\n  \n\n  \n    James-watt scholarship\n    2014-2016 \n    PhD funding issued by Heriot-Watt University\n  \n\n  \n    SINOPEC funding\n    2014-2016 \n    PhD funding to study the uncertainty of Digital Rock Analysis issued by SINOPEC\n  \n\n  \n    Science and Technology Innovation Award\n    2008 and 2009 \n    Award for involving scientific related activities (top 10%) issued by China University of Petroleum (East of China)\n  \n\n  \n    Scholarship for the scientific and technological innovation\n    2008 and 2009 \n    Scholarship for involving scientific related activities (top 5%) issued by China University of Petroleum (East of China)\n  \n  \n  \n    “Challenging Cup” Business Plan Competition\n    2008 \n    3rd Place out of 20 teams, lead team of 3, issued by China University of Petroleum (East of China)\n  \n\n\n",
    "url": "/resume/"
  }
  
]

